locals {
  arn_base = module.eks.cluster_arn != null ? join(":", slice(split(":", module.eks.cluster_arn), 0, 5)) : ""
}

data "aws_iam_policy_document" "iam_policy_document_argocd_server" {
  count = var.create_argocd_spoke_role ? 1 : 0 # Only create for non management clusters

  statement {
    sid = "List"
    actions = [
      "eks:ListFargateProfiles",
      "eks:ListNodegroups",
      "eks:ListUpdates",
      "eks:ListAddons"
    ]
    resources = [
      module.eks.cluster_arn,
      "${local.arn_base}:nodegroup/*/*/*",
      "${local.arn_base}:addon/*/*/*",
    ]
  }
  statement {
    sid = "ListDescribeAll"
    actions = [
      "eks:DescribeAddonConfigurations",
      "eks:DescribeAddonVersions",
      "eks:ListClusters",
    ]
    resources = ["*"]
  }
  statement {
    sid = "Describe"
    actions = [
      "eks:DescribeCluster",
      "eks:DescribeFargateProfile",
      "eks:DescribeNodegroup",
      "eks:DescribeUpdate",
      "eks:DescribeAddon",
      "eks:ListTagsForResource",
      "eks:AccessKubernetesApi"
    ]
    resources = [
      module.eks.cluster_arn,
      "${local.arn_base}:fargateprofile/*/*/*",
      "${local.arn_base}:nodegroup/*/*/*",
      "${local.arn_base}:addon/*/*/*",
    ]
  }
}

resource "aws_iam_policy" "argocd_server_access_policy" {
  count = var.create_argocd_spoke_role ? 1 : 0 # Only create for non management clusters

  name        = "eks-${local.cluster_name}-argocd-server-access-policy"
  path        = "/"
  description = "IAM policy for ArgoCD server access - eks-${local.cluster_name}"
  policy      = data.aws_iam_policy_document.iam_policy_document_argocd_server[0].json
}

resource "aws_iam_role" "argocd_server_access_role" {
  count = var.create_argocd_spoke_role ? 1 : 0 # Only create for non management clusters

  name = "eks-${local.cluster_name}-argocd-server-access-role"
  path = "/"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Principal = {
          AWS = "${var.argocd_mgmt_principal_arn}"
        },
        Action = "sts:AssumeRole"
      }
    ]
  })
}


resource "aws_iam_role_policy_attachment" "argocd_server_access_policy_attachment" {
  count = var.create_argocd_spoke_role ? 1 : 0 # Only create for non management clusters

  role       = aws_iam_role.argocd_server_access_role[0].name
  policy_arn = aws_iam_policy.argocd_server_access_policy[0].arn
}


argocd-role-access = {
    argocd-admin = {
      kubernetes_groups = []
      principal_arn     = join("", aws_iam_role.argocd_server_access_role.*.arn)

      policy_associations = {
        admin = {
          policy_arn = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
          access_scope = {
            apiGroups = ["*"]
            type      = "cluster"
          }
        }
      }

    }
  }
